[["index.html", "Collaborative Coding for Scientific Research: Git, GitHub, and open science Chapter 1 Introduction 1.1 Abstract 1.2 Learning objectives 1.3 Prerequisites 1.4 License", " Collaborative Coding for Scientific Research: Git, GitHub, and open science Pat Bills &amp; Kelly Kapsar 2024-04-09 Chapter 1 Introduction 1.1 Abstract This is a guide to open/team science projects on GitHub. This is not an introduction to git but a follow-on to such an introduction. While there are many introductory tutorials out there, we have found that there is a lack of information on the “culture” of open science using git/GitHub. People discover others’ code/projects, but don’t quite understand how they are organized or how to bring up and problems they’ve encountered or suggested changes that they have. This workshop is designed to empower attendees to actively participate in and engage with the open science community by teaching the often overlooked norms and procedures for understanding and working with others’ code projects. 1.2 Learning objectives By completing this workshop, participants will be able to: 1. Explore and understand the organization of a research project or package (Anatomy of well-organized GitHub repositories) 2. Use others’ code in your own workflows 3. Engage with the owners/maintainers and the broader coding community to identify and participate in discussion of issues 1.3 Prerequisites Coding: Be comfortable with coding in a language like R and/or Python. In other words: You should be familiar with reading/writing and basic wrangling of files or dataframes. Resources: Tidying data in R (Ch. in Data Science with R by Garrett Grolemund) Tidying data in Python (Ch. in Python for Data Science by Turrell et al.) Git: Have used Git to track changes in your code, OR have completed the introduction to the “git” distributed version control system on the Software Carpentries website, and understand the terms: git add/staging, commits, commit message, git history, git remote, push, pull. Resources: Version control with git (Software Carpentries) GitHub: Have at least minimal experience with github and ideally have a project with some of your code there. In other words: If you have no experience with Github, then, prior to the workshop using resources below, please create an account and attempt to push/pull changes to it. If you have attended a previous workshop covering these tasks, then that is sufficient. Resources: Version control with git and GitHub - general intro and RStudio set-up (NSF Arctic Data Center) Integrating git and GitHub with VS Code for Python users (VS Code tutorial) Open Science: Desire to become more of an active participant in the open science community. In other words: Be curious about using others’ code and writing code that others can use. 1.4 License This work is licensed under Attribution-ShareAlike 4.0 International "],["git-review.html", "Chapter 2 Review: Principles of Git 2.1 Distributed version control 2.2 Why use Git? 2.3 Why use GitHub? 2.4 Alternatives to github 2.5 Git/GitHub workflow: 2.6 Branching with git 2.7 Working with remotes", " Chapter 2 Review: Principles of Git 2.1 Distributed version control What is “distributed version control” and how to did Git lay the foundation for the golden age of software development? 2.2 Why use Git? 2.3 Why use GitHub? What is it in the context of Git and how did GitHub usher in the golden age of software development? 2.4 Alternatives to github GitLab Bitbucket rol your own 2.5 Git/GitHub workflow: Staging Committing Pushing 2.6 Branching with git 2.7 Working with remotes Set Push/pull Permissions "],["repo-organization.html", "Chapter 3 Anatomy of a GitHub repository 3.1 Types of repositories: 3.2 Implications of repository type for re-use 3.3 Directory structures 3.4 Dependencies/requirements 3.5 Interaction of source scripts 3.6 Package vs project structures 3.7 Finding branches in GitHub 3.8 Versioning and releases 3.9 Forks", " Chapter 3 Anatomy of a GitHub repository 3.1 Types of repositories: Package (installable) Project (useable) Reference (readable) 3.2 Implications of repository type for re-use 3.3 Directory structures What to look for when using someone else’s code 3.4 Dependencies/requirements 3.5 Interaction of source scripts (R and python) 3.6 Package vs project structures 3.7 Finding branches in GitHub Where to find and look at branches in GitHub 3.8 Versioning and releases 3.9 Forks "],["collaborating.html", "Chapter 4 Collaborating with GitHub 4.1 Understanding commits 4.2 Project management with GitHub 4.3 Issue management 4.4 Communication using issues 4.5 Engaging with the community 4.6 Github link awesomeness", " Chapter 4 Collaborating with GitHub 4.1 Understanding commits 4.1.1 How people communicate using commit messages Perspective of commit messages as communication can change what you include in a commit (independent of github) 4.2 Project management with GitHub Using Github’s project management lite features 4.3 Issue management What is issue management? Following issues and their fixes can help you track down your bugs 4.3.1 Pandas Example: My commit Found someone else that had the same problem Found this in the source-code for the documentation This is mentioned in the release notes for verion 1.5.0 The release notes have a link to the issue(s) for every change, including this one GH9568 , which spells out why the change was made. Since I didn’t even need to specify this parameter (it was using the default value!) I just removed it from my code, and learned my lesson to keep my code as simple as possible so that I don’t get burned by changes into the packages I depend upon. 4.4 Communication using issues 4.4.1 Requesting help/features or reporting bugs (using reprexes). 4.4.2 Example: How ask package maintainers to accommodate the global dateline and very high latitudes https://github.com/rstudio/leaflet/issues/495 This is a great example of an obtuse issue. There is an R package “MapView” this is a 1-stop-mapping thing, super easy. Someone there raised an issue. MapView depends on RLeaflet (I just know this, it doesn’t say that anywhere in the issue). The leader of the MapView project realized that it was an RLeaflet problem, so copy/pasted the issue into the RLeaflet project. I say RLeaflet because that project actually heavily depends on the original leaflet.js for javascript, which most people just called “leaflet”. Another interesting thing is that the first commenter (Darcy somebody) says that polygons are fine, which does not need to be said because the OP already said it was ok, but no one piled on and said “he already said that.” Note the issue was raised in 2015 and no one was assigned and it was not fixed. The issue was reference in 2018 for new issue (created by Rstudio) to fix it, and I only know that because in the new issue they referenced the issue number. but even that one was not fixed. also in the original issue is an extensive post to show a work-around. That info now just =sits here in a github issue. A question for the group: what should have been done by the project to deal with this issue (hints, create an issue to add the work-around in the documentation, when creating a new issue, close the original and reference the new one.. possibly tag it as “wontfix” or better tag it in a project roadmap to make it clear they care about it and will deal with at some future time. https://github.com/rstudio/leaflet/issues/225 4.4.3 Example: ggmap package Issue with Pacific mapping with ggmap: https://github.com/dkahle/ggmap/issues/326 * (solution is to change the projection, the software is not the problem, but is it in the docs?) * Another person had a question/problem but it was totally ignored: https://github.com/dkahle/ggmap/issues/295 + Why is that? + Is there a document for this package describing how to participate in the community? + Are the volunteers following the lead of the owner? + Who is fine ignoring these? 4.5 Engaging with the community Engaging with owners/maintainers and the broader coding community to identify and participate in discussion of issues. 4.5.1 What is a ‘pull request?’ (PR) (hint: it’s a github thing) A PR lifecycle: Issue Fork/Branch PR Merge 4.6 Github link awesomeness Permalinks in code and issues References to issues from commits and referencing to commits from comments "],["documentation.html", "Chapter 5 Finding and using documentation 5.1 Important elements to look out for 5.2 Code as documentation 5.3 Issues, commits and MR as documentation", " Chapter 5 Finding and using documentation 5.1 Important elements to look out for 5.2 Code as documentation 5.3 Issues, commits and MR as documentation "],["licensing.html", "Chapter 6 Attribution and licensing", " Chapter 6 Attribution and licensing "],["workflows.html", "Chapter 7 GitHub workflows 7.1 Continuous Integration/Continuous Delivery (CI/CD) and github “workflows”", " Chapter 7 GitHub workflows 7.1 Continuous Integration/Continuous Delivery (CI/CD) and github “workflows” 7.1.1 What is it? 7.1.2 Benefits 7.1.3 GitHub workflows "],["exercise.html", "Chapter 8 Exercise: Working with a repo 8.1 Instructions:", " Chapter 8 Exercise: Working with a repo Cloning a repository and using the code therein to get a result 8.1 Instructions: Select a repository from 3 choices: Python, R, Markdown Clone, follow instructions to get it working. Is there a minimum example? Can you run the tests? What is the version, release? What’s new based on the change log? Find an issue that needs to be fixed. What would you do to fix it? "],["glossary.html", "Chapter 9 Glossary", " Chapter 9 Glossary "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
